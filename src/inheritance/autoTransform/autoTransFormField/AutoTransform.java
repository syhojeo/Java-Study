/*
    클래스 자동 형변환
    클래스를 사용할때 우리는 두가지 방법에 대해서 공부했다.
    부모클래스와 부모클래스에서 더 나아가 기능을 상속받고 추가 기능까지 더해진 자식클래스이다.

    하지만 처음에는 부모클래스를 쓰다가 자식클래스의 확장된 기능을 사용하고 싶어질 때가 있을것이다
    예를들어 차를 처음 구입했을때 구입할때 있던 기본 타이어를 한국타이어, 금호 타이어등으로 변경하고 싶을때
    클래스 자동 형변환을 사용한다.

    다만 오픈카가 아닌차가 오픈카가 될 수 없듯이 클래스의 자동 형변환은 자식클래스의 모든 추가기능을 사용할 수는 없고
    부모클래스에 있던 메소드가 자식클래스에서 오버라이딩된 경우에만 새로운 기능을 사용할 수 있게 된다.

    즉, 다향성을 위해 기존 기능들에서 자식클래스의 오버라이딩된 메소드들을 참조 할 순 있지만 그것이 부모클래스의
    기능을 크게 벗어나는 완전히 추가되는 메소드나 필드의 기능은 사용할 수 없다.

    중요!!!!!!
    또한 자식클래스를 쓰는 경우 직계 상속 클래스의 추가 기능 밖에 사용할 수 없지만
    처음부터 부모클래스를 사용하는 경우 가장 상위 클래스이기 때문에 여러갈래로 뻗어나간 많은 자식클래스의 기능들을
    사용할 수 있다.

    클래스 자동형변환은 다형성을 위해 존재하며
    다형성이란 동일한 타입을 사용하지만 다양한 결과가 나오도록 하는 성질을 뜻한다

    다형성은 자동형변환을 통해서 증가 시킬수 있는데
    객체의 재정의를 통해 매개변수값을 넣으면서 필드값을 다형화 시키거나 매개변수에 클래스 타입 메소드를 넣음으로서 
    메소드의 다양화를 시킬 수 있는 2가지 방법있다.
    
    필드의 값을 다양화함으로써 실행결과가 다르게 나오도록 다형성을 구현할 수 있다.
    필드의 타입은 변함이 없지만, 실행 도중에 어떤 객체를 필드로 저장하느냐에 따라 실행 결과가 달라질 수 있다.
    자동형변환을 통해 새로운 필드값은 재정의 함으로써 메소드의 수정 없이도 다양한 메소드의 실행결과를 얻을 수 있게된다
    이것이 필드의 다형성이다.

    강제형변환
    자동형변환을 통해 오버라이딩 된 메소드에만 접근할 수 있는 객체를 자식의 객체로 강제 형변환을 시켜
    오버라이딩된 메소드 뿐만 아니라 모든 필드, 메소드에 접근 할 수 있도록 만들어준다
    
    다만 강제형변환은 자동형변환된 부모 객체에만 사용가능하며 이를 확인하기 위해 if문에 instanceof 를 사용하여
    확인한다
 */

//객체를 자식 클래스로 재정의 (자동형변환)을 함으로써 타입을 그대로 필드값을 다르게 사용하는 필드의 다형성을 기술적으로 구현한다.
package inheritance.autoTransform.autoTransFormField;

public class AutoTransform {
    public static void main(String[] args) {
        Car car =new Car();

        for(int i = 1; i <= 5; i++) {
            int problemLocation = car.run();

            switch (problemLocation) {
                case 1:
                    System.out.println("앞왼쪽 HanKookTire로 교체");
                    car.frontLeftTire = new HankookTire("앞왼쪽", 15);
                    break;

                case 2:
                    System.out.println("앞오른쪽 KumhoTire로 교체");
                    car.frontRightTire = new KumhoTire("앞오른쪽", 13);
                    break;

                case 3:
                    System.out.println("뒤왼쪽 HankookTire로 교체");
                    car.backLeftTire =  new HankookTire("뒤왼쪽", 14);
                    break;

                case 4:
                    System.out.println("뒤오른쪽 KumhoTire로 교체");
                    car.backRightTire = new KumhoTire("뒤오른쪽", 17);
                    break;
            }
            System.out.println("-----------------------------------------------------------");
        }
    }
}
